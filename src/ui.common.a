;license:MIT
;(c) 2023 by 4am
;
; common graphics functions
;
; Public functions:
; - Home
; - GridFizzle
;

;------------------------------------------------------------------------------
; Home
; clear graphics page 1
;
; in:    text screen 1 is clear (this is done at program startup)
; out:   hi-res page 1 cleared
;        text page 1 displayed
;        pointer is hidden
;        X preserved
;        A/Y clobbered
;        flags clobbered
;------------------------------------------------------------------------------
Home
         bit   PAGE1
         bit   FULLGFX
         bit   HIRES
         bit   TEXTMODE
         jsr   HidePointer
         ldy   #$00
         lda   #$80
-        sta   $2000, y
         sta   $2100, y
         sta   $2200, y
         sta   $2300, y
         sta   $2400, y
         sta   $2500, y
         sta   $2600, y
         sta   $2700, y
         sta   $2800, y
         sta   $2900, y
         sta   $2A00, y
         sta   $2B00, y
         sta   $2C00, y
         sta   $2D00, y
         sta   $2E00, y
         sta   $2F00, y
         sta   $3000, y
         sta   $3100, y
         sta   $3200, y
         sta   $3300, y
         sta   $3400, y
         sta   $3500, y
         sta   $3600, y
         sta   $3700, y
         sta   $3800, y
         sta   $3900, y
         sta   $3A00, y
         sta   $3B00, y
         sta   $3C00, y
         sta   $3D00, y
         sta   $3E00, y
         sta   $3F00, y
         iny
         bne   -
         rts

;------------------------------------------------------------------------------
; GridFizzle
; draw game board on screen one tile at a time, in a pseudo-random order
;
; in:    X = high byte of page-aligned board buffer
;        pointer is hidden
; out:   all registers and flags clobbered
;------------------------------------------------------------------------------
GridFizzle
         stx   @draw+2
         ldx   #0
         ldy   #0
@loop    txa
@loop1   eor   #$05                  ; LFSR form 0x0500 with period 0x07FF
         tax                         ; X is LFSR high byte, Y is LFSR low byte
@loop2   txa
         bne   +                     ; ignore if high byte > 0
         pha
         tya
         pha
         sta   @draw+1
         lsr
         lsr
         lsr
         lsr
         tax
         tya
         and   #$0F
         tay                         ; split LFSR low byte into nibbles and put in X (high nibble) and Y (low nibble)
         jsr   @draw
         lda   #$14
         jsr   ROM_WAIT
         pla
         tay
         pla
+        lsr
         tax
         tya
         ror
         tay
         bcc   @loop2                ; C modified by ror
         bne   @loop                 ; Z modified by tay
         txa
         bne   @loop1
         sta   @draw+1
         ; /!\ execution falls through here to draw final coordinates (0,0)
@draw    lda   $FDFD                 ; SMC
         jmp   DrawLargeCharacter
