;license:MIT
;(c) 2022 by 4am
;
; main event loop for playing puzzles
;
; Public functions:
; - PlayEventLoop

; Codes returned by event handlers (public)
kKeepPlaying = 0                     ; This code is checked with BEQ/BNE, so it must be 0
kCompletedPuzzle = 1                 ; All non-zero codes will exit play event loop
kRequestedRestart = 2                ;   with the code in X so caller knows what happened
kRequestedSkip = 3
kReturnToSelectSize = 4

;------------------------------------------------------------------------------
; PlayEventLoop
; main event loop for playing a puzzle
;
; in:    puzzle has been loaded into memory, drawn on screen, animated, &c.
;        and is ready to play
; out:   X = reason why event loop ended (see list above)
;        all other registers & flags clobbered
;------------------------------------------------------------------------------
PlayEventLoop
         bcc   @loop
         jsr   StopMusic
         jsr   Home
         ; pointer is hidden (by Home)
         jsr   DrawBoardForUser
         jsr   DrawFocusRectangle
         jsr   ShowPointer
         bit   GFXMODE
         jsr   ClearPendingEvents
@showInitialHelp
         jsr   MessageOnStartup
         +LDADDR sPressQuestionForHelp
         jsr   ShowMessage
@loop
         jsr   WaitNextEvent
         cpx   #kEventMouseMove
         beq   @onMouseMove
         cpx   #kEventClick
         beq   @onClick
         cpx   #kEventKeypress
         bne   @loop
         ldx   #0
-        ldy   kPlayKeys, x
         beq   @showInitialHelp      ; key has no associated handler, so show help message
         cpy   gLastKeyPressed       ; populated by WaitNextEvent
         beq   @dispatch
         inx
         bne   -                     ; always branches
@dispatch
         jsr   HideMessage
         lda   kPlayKeyHandlersLo, x
         sta   @j+1
         lda   kPlayKeyHandlersHi, x
         sta   @j+2
@j       jsr   $FDFD                 ; SMC
         beq   PlayEventLoop
         rts
@onMouseMove
         +LDADDR PlayEventMouseMove
         +ST16 @j+1
         jmp   @j
@onClick
         jsr   HideMessage
         +LDADDR PlayEventClick
         +ST16 @j+1
         jmp   @j

;------------------------------------------------------------------------------
; private

kPlayKeys                            ; must keep in sync with kPlayKeyHandlersLo/Hi arrays
                                     ; except for last byte ($00) which doesn't need an associated handler
         !byte $8B                   ; up arrow
         !byte $C9                   ; I
         !byte $E9                   ; i
         !byte $8A                   ; down arrow
         !byte $CD                   ; M
         !byte $ED                   ; m
         !byte $88                   ; left arrow
         !byte $CA                   ; J
         !byte $EA                   ; j
         !byte $95                   ; right arrow
         !byte $CB                   ; K
         !byte $EB                   ; k
         !byte $C5                   ; E
         !byte $E5                   ; e
         !byte $D7                   ; W
         !byte $F7                   ; w
         !byte $C2                   ; B
         !byte $E2                   ; b
         !byte $A0                   ; space
         !byte $C8                   ; H
         !byte $E8                   ; h
         !byte $9B                   ; Esc
         !byte $8E                   ; Ctrl-N
         !byte $92                   ; Ctrl-R
         !byte $93                   ; Ctrl-S
         !byte $AF                   ; /
         !byte $BF                   ; ?
         !byte $80                   ; Ctrl-@
         !byte $00

kPlayKeyHandlersLo
         !byte <PlayEventUpArrow
         !byte <PlayEventUpArrow
         !byte <PlayEventUpArrow
         !byte <PlayEventDownArrow
         !byte <PlayEventDownArrow
         !byte <PlayEventDownArrow
         !byte <PlayEventLeftArrow
         !byte <PlayEventLeftArrow
         !byte <PlayEventLeftArrow
         !byte <PlayEventRightArrow
         !byte <PlayEventRightArrow
         !byte <PlayEventRightArrow
         !byte <PlayEventE
         !byte <PlayEventE
         !byte <PlayEventW
         !byte <PlayEventW
         !byte <PlayEventB
         !byte <PlayEventB
         !byte <PlayEventSpace
         !byte <PlayEventH
         !byte <PlayEventH
         !byte <PlayEventEsc
         !byte <PlayEventCtrlN
         !byte <PlayEventCtrlR
         !byte <PlayEventCtrlS
         !byte <PlayEventQuestion
         !byte <PlayEventQuestion
         !byte <PlayEventDevExit

kPlayKeyHandlersHi
         !byte >PlayEventUpArrow
         !byte >PlayEventUpArrow
         !byte >PlayEventUpArrow
         !byte >PlayEventDownArrow
         !byte >PlayEventDownArrow
         !byte >PlayEventDownArrow
         !byte >PlayEventLeftArrow
         !byte >PlayEventLeftArrow
         !byte >PlayEventLeftArrow
         !byte >PlayEventRightArrow
         !byte >PlayEventRightArrow
         !byte >PlayEventRightArrow
         !byte >PlayEventE
         !byte >PlayEventE
         !byte >PlayEventW
         !byte >PlayEventW
         !byte >PlayEventB
         !byte >PlayEventB
         !byte >PlayEventSpace
         !byte >PlayEventH
         !byte >PlayEventH
         !byte >PlayEventEsc
         !byte >PlayEventCtrlN
         !byte >PlayEventCtrlR
         !byte >PlayEventCtrlS
         !byte >PlayEventQuestion
         !byte >PlayEventQuestion
         !byte >PlayEventDevExit

PlayEventMouseMove
         jsr   MousePositionToLogicalCoordinates
         cpx   gFocusedRow
         bne   @maybeMoveFocus
         cpy   gFocusedColumn
         beq   @done
@maybeMoveFocus
         jsr   CanMoveFocusTo
         bcs   @done
         jsr   HidePointer
         txa
         pha
         tya
         pha
         jsr   ClearFocusRectangle
         pla
         tay
         pla
         tax
         stx   gFocusedRow
         sty   gFocusedColumn
         jsr   DrawFocusRectangle
         jsr   ShowPointer
@done
         ldx   #kKeepPlaying
         clc
         rts

PlayEventClick
         jsr   ClickPositionToLogicalCoordinates
         cpx   gFocusedRow
         bne   @done
         cpy   gFocusedColumn
         beq   PlayEventSpace
@done
         ldx   #kKeepPlaying
         clc
         rts

PlayEventSpace
         jsr   GetFocusCoordinates
         jsr   GetValueAt
         bmi   @done
         tax
         lda   kNextValue, x
         jmp   Change
@done
         ldx   #kKeepPlaying
         clc
         rts
kNextValue
         !byte kWhiteTile,$FF,kBlueTile,kEmptyTile

PlayEventEsc
         jsr   HidePointer
         jsr   ClearFocusRectangle
         jsr   ShowPointer
         ldx   #kReturnToSelectSize  ; caller will exit play event loop
         rts

PlayEventCtrlR
         ldx   #kRequestedRestart    ; caller will exit play event loop
         rts

PlayEventCtrlN
         ldx   #kRequestedSkip       ; caller will exit play event loop
         rts

PlayEventCtrlS
         ; TODO
         brk

PlayEventUpArrow
         jsr   GetFocusCoordinates
         dex
         jsr   CanMoveFocusTo
         bcs   CantMoveFocus
         jsr   HidePointer
         jsr   ClearFocusRectangle
         dec   gFocusedRow
         bpl   RedrawFocusAndKeepPlaying        ; always branches

PlayEventDownArrow
         jsr   GetFocusCoordinates
         inx
         jsr   CanMoveFocusTo
         bcs   CantMoveFocus
         jsr   HidePointer
         jsr   ClearFocusRectangle
         inc   gFocusedRow
         bpl   RedrawFocusAndKeepPlaying        ; always branches

PlayEventLeftArrow
         jsr   GetFocusCoordinates
         dey
         jsr   CanMoveFocusTo
         bcs   CantMoveFocus
         jsr   HidePointer
         jsr   ClearFocusRectangle
         dec   gFocusedColumn
         bpl   RedrawFocusAndKeepPlaying        ; always branches

PlayEventRightArrow
         jsr   GetFocusCoordinates
         iny
         jsr   CanMoveFocusTo
         bcs   CantMoveFocus
         jsr   HidePointer
         jsr   ClearFocusRectangle
         inc   gFocusedColumn
         ; /!\ execution falls through here to RedrawFocusAndKeepPlaying

RedrawFocusAndKeepPlaying
         ; pointer is hidden
         jsr   DrawFocusRectangle
         jsr   ShowPointer
         ldx   #kKeepPlaying
         clc
         rts

PlayEventE
         jsr   GetFocusCoordinates
         jsr   GetValueAt
         bmi   CantChange
         lda   #kEmptyTile
         ; /!\ execution falls through here to Change

Change
         jsr   HidePointer
         sta   (board_base_ptr), y   ; populated by GetValueAt
         pha
         jsr   ClearFocusRectangle
         jsr   GetFocusCoordinates
         pla
         jsr   DrawLargeCharacter
         jsr   FindEmptyCoordinatesForUser
         bcs   PlayEventH            ; if board is full, act as if user pressed H
                                     ; for a hint -- if we find an invalid move, we
                                     ; will highlight it, and otherwise we will
                                     ; display the win sequence
         jsr   DrawFocusRectangle
         jsr   ShowPointer
CantMoveFocus
CantChange
         ldx   #kKeepPlaying
         clc
         rts

PlayEventW
         jsr   GetFocusCoordinates
         jsr   GetValueAt
         bmi   CantChange
         lda   #kWhiteTile
         bne   Change                ; always branches

PlayEventB
         jsr   GetFocusCoordinates
         jsr   GetValueAt
         bmi   CantChange
         lda   #kBlueTile
         bne   Change                ; always branches

PlayEventH
         jsr   FindInvalidMoveForUser
         bcc   @showHint
         jsr   FindValidMoveForUser
         bcc   @showHint
         jsr   AWinnerIsYou          ; no valid or invalid moves, which means you won
         ldx   #kCompletedPuzzle     ; caller will exit event loop
         rts
@showHint
         jsr   HidePointer
         txa
         pha
         tya
         pha
         jsr   ClearFocusRectangle   ; clear 1x1 focus rectangle at
                                     ; current tile position
         ldx   extended_x
         ldy   extended_y
         lda   extended_type
         cmp   #kFocusEntireRow
         bne   +
         ; DrawFocusRectangeAt knows nothing about the board buffer.
         ; In order to draw a rectangle around an entire row, we need
         ; to calculate the actual coordinates of the left-most tile.
         lda   #16
         sec
         sbc   gLastSelectedBoardSize
         lsr
         tay
         sty   extended_y
         lda   extended_type
+        cmp   #kFocusEntireColumn
         bne   +
         ; DrawFocusRectangeAt knows nothing about the board buffer.
         ; In order to draw a rectangle around an entire column, we need
         ; to calculate the actual coordinates of the top-most tile.
         lda   #16
         sec
         sbc   gLastSelectedBoardSize
         lsr
         tax
         stx   extended_x
         lda   extended_type
+
         jsr   DrawFocusRectangleAt  ; draw focus rectangle for hint
         +LD16 extended_message
         jsr   ShowMessage           ; show message for hint
         jsr   ShowPointer
         ldx   #20
         jsr   LongWaitForKeyWithTimeout
         jsr   ClearPendingEvents    ; swallow keypress or click (if any)
         jsr   HidePointer
         jsr   HideMessage
         ldx   extended_x
         ldy   extended_y
         lda   extended_type
         jsr   ClearFocusRectangleAt ; clear focus rectange for hint

         pla
         sta   gFocusedColumn
         pla
         sta   gFocusedRow
         jsr   DrawFocusRectangle    ; draw 1x1 focus rectangle around the
                                     ; exact tile that FindValidMove found
         jsr   ShowPointer
         ldx   #kKeepPlaying
         clc
         rts

PlayEventQuestion
         jsr   ShowHelp
         ldx   #kKeepPlaying         ; Z=1 so caller will stay in play event loop
         sec                         ; C=1 so caller will do a full screen refresh
         rts

CanMoveFocusTo
; in:    X = logical row
;        Y = logical column
; out:   X/Y preserved
;        C = 0 if focus can move to the given logical coordinates
;          and A = tile value at those coordinates
;        C = 1 if focus can not move there because
;          X < 0, or
;          Y < 0, or
;          X > 15, or
;          Y > 15, or
;          those coordinates contain a padding byte, meaning that
;          you're trying to move past the edge of the logical board
         cpx   #16
         bcs   +
         cpy   #16
         bcs   +
GetValueAt
         +CalculateRowBase
         sta   board_base_ptr
         lda   #>kUserBoardBuffer
         sta   board_base_ptr+1
         lda   (board_base_ptr), y
         cmp   #kPadding
         bcs   +
         clc
         rts
+        sec
         rts

AWinnerIsYou
         +LDADDR WinScript
         jmp   TileScript

WinScript
         !byte CALL, <ColorCycleFizzle, >ColorCycleFizzle, kBlueTile, kWhiteTile
         !byte CALL, <ColorCycleFizzle, >ColorCycleFizzle, kWhiteTile, kPurpleTile
         !byte CALL, <ColorCycleFizzle, >ColorCycleFizzle, kPurpleTile, kWhiteTile
         !byte CALL, <ColorCycleFizzle, >ColorCycleFizzle, kWhiteTile, kBlueTile
         !byte CALL, <ColorCycleFizzle, >ColorCycleFizzle, kEmptyTile, kEmptyTile
         +WPRINT  7, 3, sPerfection
         !byte WAIT, 40
         !byte EXIT

ColorCycleFizzle
         jsr   GetNextScriptByte
         stx   tmpx
         jsr   GetNextScriptByte
         stx   tmpy
         ldx   #0
-        lda   kUserBoardBuffer, x
         and   #TILE_MASK
         cmp   #kWhiteTile
         beq   +
         cmp   #kBlueTile
         beq   ++
         lda   #kEmptyTile
         +HIDE_NEXT_2_BYTES
+        lda   tmpx
         +HIDE_NEXT_2_BYTES
++       lda   tmpy
         sta   kDemoBoardBuffer, x
         inx
         bne   -
         ldx   #>kDemoBoardBuffer
         jmp   GridFizzle

PlayEventDevExit
         jsr   HidePointer
         jsr   ClearFocusRectangle
         ldx   #>kUserBoardBuffer
         ldy   gLastSelectedBoardSize
         jsr   SolveBoardAt
         jmp   PlayEventH
