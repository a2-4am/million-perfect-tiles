;license:MIT
;(c) 2022 by 4am
;
; self-running demo
;

kWhite = 2
kBlue = 3

sRule1
         !byte 6
         !raw  "RULE 1"

sNever
         !byte 34
         !raw  "Never 3 in a row of the same color"

sRule2
         !byte 6
         !raw  "RULE 2"

sSame
         !byte 34
         !raw  "Same number of colors in every row"

sRule3
         !byte 6
         !raw  "RULE 3"

sUnique
         !byte 34
         !raw  "        Each row is unique        "

;------------------------------------------------------------------------------
; RunDemo
; run self-running demo until keypress or completion
;
; in:    none
; out:   all other registers & flags clobbered
;------------------------------------------------------------------------------
RunDemo
         jsr   InitDemoBoard
         +LDADDR DemoCode
         jmp   TileScript

DemoCode
         !byte HOME

         !byte BOARD,       >kDemoBoardBuffer
         !byte WAIT ,10

         !byte PRINT, 0,17
         !word              sRule1
         !byte WAIT , 2
         !byte PRINT, 2, 3
         !word              sNever
         !byte WAIT ,20

         !byte FOCUS, 6, 7, kFocus1x3
         !byte WAIT ,10
         !byte TILE , 6, 8, kBlue
         !byte WAIT , 5
         !byte UNFOCUS, 6, 7, kFocus1x3
         !byte WAIT , 2

         !byte FOCUS, 7, 8, kFocus1x3
         !byte WAIT ,10
         !byte TILE , 7, 9, kWhite
         !byte WAIT , 5
         !byte UNFOCUS, 7, 8, kFocus1x3
         !byte WAIT , 2

         !byte FOCUS, 5, 8, kFocus3x1
         !byte WAIT ,10
         !byte TILE , 5, 8, kWhite
         !byte FOCUS, 5, 8, kFocus3x1
         !byte WAIT , 5
         !byte UNFOCUS, 5, 8, kFocus3x1
         !byte WAIT , 2

         !byte FOCUS, 6, 8, kFocus3x1
         !byte WAIT ,10
         !byte TILE , 8, 8, kWhite
         !byte FOCUS, 6, 8, kFocus3x1
         !byte WAIT , 5
         !byte UNFOCUS, 6, 8, kFocus3x1
         !byte WAIT , 2

         !byte FOCUS, 5, 9, kFocus3x1
         !byte WAIT , 5
         !byte TILE , 5, 9, kBlue
         !byte FOCUS, 5, 9, kFocus3x1
         !byte WAIT , 3
         !byte UNFOCUS, 5, 9, kFocus3x1
         !byte WAIT , 1

         !byte FOCUS, 6, 9, kFocus3x1
         !byte WAIT , 5
         !byte TILE , 8, 9, kBlue
         !byte FOCUS, 6, 9, kFocus3x1
         !byte WAIT , 3
         !byte UNFOCUS, 6, 9, kFocus3x1
         !byte WAIT , 1

         !byte FOCUS, 8, 7, kFocus3x1
         !byte WAIT , 5
         !byte TILE , 8, 7, kBlue
         !byte FOCUS, 8, 7, kFocus3x1
         !byte WAIT , 3
         !byte UNFOCUS, 8, 7, kFocus3x1
         !byte WAIT , 1

         !byte FOCUS, 8, 9, kFocus3x1
         !byte WAIT , 5
         !byte TILE , 9, 9, kWhite
         !byte FOCUS, 8, 9, kFocus3x1
         !byte WAIT , 3
         !byte UNFOCUS, 8, 9, kFocus3x1
         !byte WAIT , 1

         !byte FOCUS, 9, 7, kFocus1x3
         !byte WAIT , 5
         !byte TILE , 9, 8, kBlue
         !byte WAIT , 3
         !byte UNFOCUS, 9, 7, kFocus1x3
         !byte WAIT , 1

         !byte PRINT, 0,17
         !word              sRule2
         !byte PRINT, 2, 3
         !word              sSame
         !byte WAIT ,20

         !byte FOCUS, 5, 8, kFocusEntireColumn
         !byte WAIT ,10
         !byte TILE ,10, 8, kWhite
         !byte FOCUS, 5, 8, kFocusEntireColumn
         !byte WAIT , 5
         !byte UNFOCUS, 5, 8, kFocusEntireColumn
         !byte WAIT , 2

         !byte PRINT, 0,17
         !word              sRule3
         !byte PRINT, 2, 3
         !word              sUnique
         !byte WAIT ,20

         !byte WAIT , 255
         !byte EXIT

InitDemoBoard
         ldy   #$00
         lda   #$FF
@clear
         sta   kDemoBoardBuffer, y
         iny
         bne   @clear
         ldx   #$55
         ;Y=0
@load
         lda   kDemoData, y
         cmp   #$8D
         beq   @next
         cmp   #$FF
         beq   @done
         sta   kDemoBoardBuffer, x
@inc     iny
         inx
         bne   @load                 ; always branches
@done
         rts
@next
         txa
         clc
         adc   #$09
         tax
         bne   @inc                  ; always branches

kDemoData
         !byte $82,$00,$00,$00,$00,$00,$8D
         !byte $00,$00,$82,$00,$82,$00,$8D
         !byte $00,$00,$00,$83,$00,$83,$8D
         !byte $00,$00,$00,$00,$00,$00,$8D
         !byte $00,$83,$82,$00,$00,$00,$8D
         !byte $00,$00,$82,$00,$83,$00,$FF

;    0123456789ABCDEF
;$00 ////////////////
;$10 ////////////////
;$20 ////////////////
;$30 ////////////////
;$40 ////////////////
;$50 /////0..01./////
;$60 /////..010./////
;$70 /////...101/////
;$80 /////...01./////
;$90 /////.1010./////
;$A0 /////..001./////
;$B0 ////////////////
;$C0 ////////////////
;$D0 ////////////////
;$E0 ////////////////
;$F0 ////////////////

!if 0 {
SolveDemo
@loop
         +DEBUGWAIT
         jsr   FindValidMoveForDemo
         bcc   @draw
         jsr   TransposeBoard        ; reuses board_base_ptr populated by FindValidMoveForDemo
                                     ; preserves all flags and registers
         jsr   FindValidMoveForDemo
         jsr   TransposeBoard        ; reuses board_base_ptr populated by FindValidMoveForDemo
                                     ; preserves all flags and registers
         bcs   @exit                 ; C is from FindValidMoveForDemo
         jsr   SwapXY                ; swap X & Y because we found a move while the board was transposed
@draw
         bit   GFXMODE
         jsr   DrawLargeCharacter
         pha
         jsr   CalculateRowBase
         sta   board_base_ptr
         pla
         sta   (board_base_ptr), y
         bne   @loop                 ; always branches
@exit
         rts
}
