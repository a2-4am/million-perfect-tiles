;license:MIT
;(c) 2023 by 4am
;
; drawing routines for the puzzle board
;
; Public functions:
; - DrawBoardForTitle
; - DrawBoardForUser
; - DrawBoardAt
; - SolveBoardAt

DrawBoardForTitle
         ldx   #>kTitleBoardBuffer
         +HIDE_NEXT_2_BYTES
         ; /!\ execution falls through here to DrawBoardForUser
DrawBoardForUser
         ldx   #>kUserBoardBuffer
         ; /!\ execution falls through here to DrawBoardAt

;------------------------------------------------------------------------------
; DrawBoardAt
; draw game board on screen
;
; in:    X = high byte of page-aligned board buffer
;        pointer is hidden
; out:   all flags and registers clobbered
;------------------------------------------------------------------------------
DrawBoardAt
         stx   board_base_ptr+1
         stx   @a+2
         lda   #$FF
         sta   @a+1
         ldx   #$0F
-        ldy   #$0F
@a       lda   $FDFD                 ; SMC
         and   #TILE_MASK
         cmp   #kWhiteTile
         beq   @draw
         cmp   #kBlueTile
         bne   @nodraw
@draw    jsr   DrawLargeCharacter
@nodraw  dec   @a+1
         dey
         bpl   @a
         dex
         bpl   -
         rts

;------------------------------------------------------------------------------
; SolveBoardAt
; visually solve game board on screen
;
; in:    X = high byte of page-aligned board buffer
;        Y = logical board size (6,8,10,12,14,16)
;        pointer is hidden
; out:   all flags and registers clobbered
;------------------------------------------------------------------------------
SolveBoardAt
         stx   board_base_ptr_original
         stx   @a+2
         sty   logical_board_size

         ; create transposed board buffer to speed up solving
         jsr   TransposeBoardIntoBackupBuffer

         ; find first move, if any
         jsr   FindValidMove
         bcs   @exit

         ; some callers start in text mode and only want to switch to
         ; graphics mode if the board is not already solved, so we
         ; check for one valid move outside the loop so we only have
         ; to switch modes once
         bit   GFXMODE
@loop
         ; draw tile
         jsr   DrawLargeCharacter

         ; update board buffer and transposed board buffer
         pha
         +CalculateRowBase
         sta   @a+1
         lda   kRowBases, y
         sta   @b+1
         pla
@a       sta   $FDFD, y              ; SMC
@b       sta   kTransposedBoardBuffer, x ; SMC

         ; find next move, if any
         jsr   FindValidMove
         bcc   @loop
@exit
         rts
