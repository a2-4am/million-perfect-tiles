;license:MIT
;(c) 2022 by 4am
;
; drawing routines for the puzzle board
;

; DrawBoardForTitle
; DrawBoardForUser
; DrawBoardAt
; SolveBoardAt

DrawBoardForTitle
         ldx   #>kTitleBoardBuffer
         +HIDE_NEXT_2_BYTES
         ; /!\ execution falls through here to DrawBoardForUser
DrawBoardForUser
         ldx   #>kUserBoardBuffer
         ; /!\ execution falls through here to DrawBoardAt

;------------------------------------------------------------------------------
; DrawBoardAt
; draw game board on screen
;
; in:    X = high byte of page-aligned board buffer
;        pointer is hidden
; out:   all flags and registers clobbered
;------------------------------------------------------------------------------
DrawBoardAt
         stx   board_base_ptr+1
         stx   @a+2
         lda   #$FF
         sta   @a+1
         ldx   #$0F
-        ldy   #$0F
@a       lda   $FDFD                 ; SMC
         and   #$7F
         cmp   #$02
         beq   @draw
         cmp   #$03
         bne   @nodraw
@draw    jsr   DrawLargeCharacter
@nodraw  dec   @a+1
         dey
         bpl   @a
         dex
         bpl   -
         rts

SolveBoardAt
; in:    X = high byte of page-aligned board buffer
;        Y = logical board size (6,8,10,12,14,16)
         stx   board_base_ptr+1
         sty   logical_board_size
@loop
         ldx   board_base_ptr+1
         ldy   logical_board_size
         jsr   FindValidMove
         bcc   @draw
         jsr   TransposeBoard        ; reuses board_base_ptr populated by FindValidMoveForTitle
                                     ; preserves all flags and registers
         ldx   board_base_ptr+1
         ldy   logical_board_size
         jsr   FindValidMove
         jsr   TransposeBoard        ; reuses board_base_ptr populated by FindValidMoveForTitle
                                     ; preserves all flags and registers
         bcs   @exit                 ; C is from FindValidMoveForTitle
         jsr   SwapXY                ; swap X & Y because we found a move while the board was transposed
@draw
         bit   GFXMODE
         jsr   DrawLargeCharacter
         pha
         jsr   CalculateRowBase
         sta   board_base_ptr
         pla
         sta   (board_base_ptr), y
         bne   @loop                 ; always branches
@exit
         rts
