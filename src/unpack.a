;license:MIT
;(c) 2022 by qkumba
;

; Public functions:
; - nth
;
;------------------------------------------------------------------------------
; nth
;
; finds and returns nth board
;
; in:    X = target page to write board
;        A/Y (lo/hi) set to value of n
;        logical_board_size populated with one of 6,8,10,12,14,16
; out:   page X filled with centered board and appropriate padding
;        all registers and flags clobbered
;------------------------------------------------------------------------------

nth
         stx   .target_page + 1
         sta   tmpx
         sty   tmpy
         ora   tmpy
         ldy   #0
         ldx   logical_board_size
;         cpx   #16
;         bne   +
;         iny
+        sty   .offset + 2
         cmp   #1
         lda   .packed_length - 6, x
         sta   .readsize
         lda   .board_base - 6, x
         ldy   .board_base - 5, x
         bcc   .found
-        clc
         adc   .readsize
         bcc   +
         iny
         bne   +
         inc   .offset + 2
+        tax
         lda   tmpx
         bne   +
         dec   tmpy
+        dec   tmpx
         lda   tmpx
         ora   tmpy
         cmp   #1
         txa
         bcs   -

.found
         sta   .offset
         sty   .offset + 1
         jsr   MLI
         !byte MLI_OPEN
         !word .c8_parms
         jsr   MLI
         !byte MLI_SETMARK
         !word .ce_parms
         jsr   MLI
         !byte MLI_READ
         !word .ca_parms
         jsr   MLI
         !byte MLI_CLOSE
         !word .cc_parms
         jsr   .unpack
         sty   unpack_ptr

.target_page
         lda   #0                    ; SMC
         sta   unpack_ptr + 1
         lda   logical_board_size
         sta   tmpy
         jsr   .padvert
--       jsr   .padhorz
         lda   logical_board_size
         sta   tmpx
-        lda   unpack_base, y
         sta   (unpack_ptr, x)
         iny
         inc   unpack_ptr
         dec   tmpx
         bne   -
         jsr   .padhorz
         dec   tmpy
         bne   --

.padvert
         sec
         lda   #16
         sbc   logical_board_size
         beq   +
         lsr
         sta   tmpx
-        ldx   #16
         jsr   .fillline
         dec   tmpx
         bne   -
+        rts

.padhorz
         sec
         lda   #16
         sbc   logical_board_size
         lsr
         tax
         beq   +
         tya
         pha
         jsr   .fillline
         pla
         tay
+        rts

.fillline
         ldy   #0
.fillchar=*+1
         lda   #$FF
-        sta   (unpack_ptr), y
         inc   unpack_ptr
         dec   .fillchar
         lda   .fillchar
         cmp   #$FD
         bcs   +
         lda   #$FF
         sta   .fillchar
+        dex
         bne   -
         rts

.packed_length
         !word 8, 13, 20, 26, 34, 45

.board_base ; must match STARTING_OFFSET_PER_BOARD_SIZE in bin/packer.py
         !word 0, 4096, 10752, 20992, 34304, 51712

.c8_parms
         !byte 3
         !word .filename
         !word file_buffer
         !byte 0

.ca_parms
         !byte 4
         !byte 1
         !word read_buffer
.readsize
         !word $0000
         !word $ffff

.ce_parms
         !byte 2
         !byte 1
.offset
         !byte 0, 0, 0

.cc_parms
         !byte 1
         !byte 0

.filename
         !byte .filename_e - .filename_b
.filename_b
         !text  "PUZZLES.BIN"
.filename_e

;------------------------------------------------------------------------------
; .unpack
; unpack compressed board into tile format
;
; in:    compressed board in read_buffer
; out:   board unpacked to unpack_base
;        all registers and flags clobbered
;------------------------------------------------------------------------------

.unpack
         ldy   #0
         sty   unpack_ptr
         lda   #>unpack_base
         sta   unpack_ptr + 1
         lda   #<read_buffer
         sta   string_ptr
         lda   #>read_buffer
         sta   string_ptr + 1
         lda   #$80

.checkmode
         jsr   .fetchbit
         ldx   #0
         bcs   .store                ; 1=store n zeroes
                                     ; 0=copy next encoded value

.copy
         jsr   .fetchbit
         bcc   .zero                 ; 0=00
         ldx   #$41                  ; encoded value starts with 1
         jsr   .fetchbit

.zero
         pha
         txa
         rol                         ; now 10 (2) or 11 (3) [+ possibly fixed bit]
         jsr   .write
         pla
         bne   .checkmode            ; always

.store
         inx
         jsr   .fetchbit             ; n is sequence of 1s
         bcs   .store                ; as index of odd numbers
         pha
         txa
         asl
         tax
         dex                         ; 1=1, 2=3, 3=5, 4=7, 5=9...
         tya

.loop
         jsr   .write
         dex
         bne   .loop
         pla
         bne   .copy                 ; always

.fetchbit
         asl
         bne   .done
         lda   (string_ptr), y
         rol
         inc   string_ptr
         bne   .done
         inc   string_ptr + 1

.done
         rts

.write
         sta   (unpack_ptr), y
         inc   unpack_ptr
         bne   +
         pla
         pla
         pla
+        rts
