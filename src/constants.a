;license:MIT
;(c) 2022 by 4am
;

;------------------------------------------------------------------------------
; YE OLDE GRAND UNIFIED MEMORY MAP
;
; MAIN MEMORY
; 0100..01BF - HGR base address table (lo)
; 0300..03BF - HGR base address table (hi)
; 03C0..03EC - used by nth() when reading puzzles from disk
; 0400..07FF - text page (kept black for switching)
;
; 1A00..1AFF - board buffer for main menu
; 1B00..1BFF - used by nth() when decompressing puzzles read from disk
; 1C00..1FFF - ProDOS file buffer
; 2000..3FFF - hi-res page
; 4000+      - program code (relocated to here at startup)
;------------------------------------------------------------------------------

; soft switches
KBD =          $C000      ; last key pressed (if any)
STOREOFF =     $C000      ; STA then use the following 4 flags:
READMAINMEM =  $C002      ; STA to read from main mem
READAUXMEM =   $C003      ; STA to read from aux mem
WRITEMAINMEM = $C004      ; STA to write to main mem
WRITEAUXMEM =  $C005      ; STA to write to aux mem
CLRC3ROM =     $C00A      ; STA to use internal Slot 3 ROM (required to use 128K and DHGR)
SETC3ROM =     $C00B      ; STA to use external Slot 3 ROM (required to detect VidHD in slot 3)
CLR80VID =     $C00C      ; 40 columns (also used to get out of DHGR mode)
SET80VID =     $C00D      ; 80 columns (also used to get into DHGR mode)
PRIMARYCHARSET= $C00E     ; no mousetext for you
CLEARKBD =     $C010      ; clear last key pressed
SPEAKER =      $C030      ; chirp chirp
CLOCKCTL =     $C034      ; bits 0-3 are IIgs border color (also VidHD)
GFXMODE =      $C050
TEXTMODE =     $C051
FULLGFX =      $C052
MIXGFX =       $C053
PAGE1 =        $C054      ; page 1 (affects text, HGR, DHGR)
PAGE2 =        $C055      ; page 2 (affects text, HGR, DHGR)
LORES =        $C056
HIRES =        $C057

; ROM routines and addresses
MLI =          $BF00
ROM_TEXT =     $FB2F
ROM_MACHINEID =$FBB3
ROM_HOME =     $FC58
ROM_WAIT =     $FCA8
ROM_COUT =     $FDED
ROM_NORMAL =   $FE84      ; NORMAL text (instead of INVERSE or FLASH)
ROM_IN0 =      $FE89      ; SETKBD
ROM_PR0 =      $FE93      ; SETVID
HTAB         = $24        ; byte
VTAB         = $25        ; byte
RNDSEED      = $4E        ; word

; application-specific addresses
gLastKeyPressed           = $DE      ; byte
logical_board_size        = $DF      ; byte (used by FindValidMove)
row_empty_counts          = $E0      ; 0x10 bytes (used by FindValidMove)
hgr_base_ptr              = $F0      ; word (used by DrawLargeCharacter)
char_index                = $F2      ; byte (used by DrawLargeCharacter)
char_row                  = $F3      ; byte (used by DrawLargeCharacter)
board_base_ptr            = $F4      ; word (used by FindValidMove)
colorcount2               = $F6      ; byte (used by FindValidMove)
row1                      = $F6      ; byte (used by FindValidMove)
colorcount3               = $F7      ; byte (used by FindValidMove)
row2                      = $F7      ; byte (used by FindValidMove)
tile_column               = $F8      ; byte (used by FindValidMove)
board_base_ptr2           = $F9      ; word (used by FindValidMove)
unpack_ptr                = $F9      ; word (used by nth)
string_len                = $FB      ; byte (used by DrawLargeString)
string_ptr                = $FC      ; word (used by DrawLargeString)
tmpx                      = $FE      ; byte (used by DrawLargeCharacter)
tmpy                      = $FF      ; byte (used by DrawLargeCharacter)
HGRLO                     = $0100    ; 0xC0 bytes (used by DrawLargeCharacter)
HGRHI                     = $0300    ; 0xC0 bytes (used by DrawLargeCharacter)
read_buffer               = $03C0    ; 0x2D bytes (used by nth)
kUserBoardBuffer          = $1900    ; 0x0100 bytes, page-aligned
kTitleBoardBuffer         = $1A00    ; 0x0100 bytes, page-aligned (used by DrawMainMenuBackground)
unpack_base               = $1B00    ; 0x0100 bytes, page-aligned (used by nth)
file_buffer               = $1C00    ; 0x0400 bytes (used by nth)
DisableAccelerator        = $BEB4
EnableAccelerator         = DisableAccelerator+3

kTitleBoardSize           = 16
